{"id":"../node_modules/jwt-decode/lib/atob.js","dependencies":[{"name":"C:\\React\\SEIMS\\client\\package.json","includedInParent":true,"mtime":1556884550610},{"name":"C:\\React\\SEIMS\\node_modules\\jwt-decode\\package.json","includedInParent":true,"mtime":1556873911525}],"generated":{"js":"/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/jwt-decode/lib/atob.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"../node_modules/jwt-decode/lib/atob.js":"/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n"},"lineCount":39}},"error":null,"hash":"f2bba4601c2761524b36f73114f4ac0f","cacheData":{"env":{}}}